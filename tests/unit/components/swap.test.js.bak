import '../setup.js';

describe('SwapComponent', () => {
  beforeEach(() => {
    cleanupDOM();
  });

  afterEach(() => {
    cleanupDOM();
  });
  let SwapComponent;

  before(async () => {
    await import('../../src/dry2/dry2.js');
    await import('../../src/dry2/swap.js');
    SwapComponent = customElements.get('swap-component');
  });

  describe('Basic Functionality', () => {
    let swap;

    beforeEach(() => {
      swap = document.createElement('swap-component');
      document.body.appendChild(swap);
    });

    it('should create swap component', async () => {
      await waitForComponent(swap);
      expect(swap).to.be.instanceOf(SwapComponent);
      expect(swap.querySelector('.swap-component')).to.exist;
    });

    it('should start in inactive state by default', () => {
      expect(swap.active).to.be.false;
    });

    it('should display default icons when none specified', async () => {
      await waitForComponent(swap);
      const iconContainer = swap.querySelector('.swap-icon');
      expect(iconContainer).to.exist;
      expect(iconContainer.innerHTML).to.include('svg');
    });

    it('should display custom icons when specified', async () => {
      swap.setAttribute('icon-on', '<i class="fas fa-check"></i>');
      swap.setAttribute('icon-off', '<i class="fas fa-times"></i>');
      await waitForComponent(swap);
      
      const iconContainer = swap.querySelector('.swap-icon');
      expect(iconContainer.innerHTML).to.include('fa-times');
    });

    it('should toggle active state on click', async () => {
      await waitForComponent(swap);
      
      expect(swap.active).to.be.false;
      simulateClick(swap);
      expect(swap.active).to.be.true;
      
      simulateClick(swap);
      expect(swap.active).to.be.false;
    });

    it('should toggle active state on Enter key', async () => {
      await waitForComponent(swap);
      
      expect(swap.active).to.be.false;
      simulateKeydown(swap, 'Enter');
      expect(swap.active).to.be.true;
    });

    it('should toggle active state on Space key', async () => {
      await waitForComponent(swap);
      
      expect(swap.active).to.be.false;
      simulateKeydown(swap, ' ');
      expect(swap.active).to.be.true;
    });
  });

  describe('State Management', () => {
    let swap;

    beforeEach(() => {
      swap = document.createElement('swap-component');
      document.body.appendChild(swap);
    });

    it('should set initial active state from attribute', async () => {
      swap.setAttribute('active', '');
      await waitForComponent(swap);
      expect(swap.active).to.be.true;
    });

    it('should update DOM when active state changes', async () => {
      swap.setAttribute('icon-on', '<i class="fas fa-check"></i>');
      swap.setAttribute('icon-off', '<i class="fas fa-times"></i>');
      await waitForComponent(swap);
      
      expect(swap.querySelector('.swap-icon').innerHTML).to.include('fa-times');
      
      swap.active = true;
      await waitForComponent(swap);
      expect(swap.querySelector('.swap-icon').innerHTML).to.include('fa-check');
    });

    it('should emit change event when state changes', (done) => {
      swap.addEventListener('swap:change', (event) => {
        expect(event.detail.active).to.be.true;
        expect(event.detail.component).to.equal(swap);
        done();
      });
      
      swap.active = true;
    });
  });

  describe('Disabled State', () => {
    let swap;

    beforeEach(() => {
      swap = document.createElement('swap-component');
      swap.disabled = true;
      document.body.appendChild(swap);
    });

    it('should not toggle when disabled', async () => {
      await waitForComponent(swap);
      
      expect(swap.active).to.be.false;
      simulateClick(swap);
      expect(swap.active).to.be.false;
    });

    it('should not respond to keyboard when disabled', async () => {
      await waitForComponent(swap);
      
      expect(swap.active).to.be.false;
      simulateKeydown(swap, 'Enter');
      expect(swap.active).to.be.false;
    });

    it('should have disabled styling', async () => {
      await waitForComponent(swap);
      const component = swap.querySelector('.swap-component');
      expect(component.className).to.include('opacity-50');
      expect(component.className).to.include('cursor-not-allowed');
    });

    it('should have tabindex -1 when disabled', async () => {
      await waitForComponent(swap);
      const component = swap.querySelector('.swap-component');
      expect(component.getAttribute('tabindex')).to.equal('-1');
    });
  });

  describe('Size Variants', () => {
    let swap;

    beforeEach(() => {
      swap = document.createElement('swap-component');
      document.body.appendChild(swap);
    });

    it('should apply small size classes', async () => {
      swap.size = 'small';
      await waitForComponent(swap);
      
      const component = swap.querySelector('.swap-component');
      expect(component.className).to.include('text-sm');
      expect(component.className).to.include('p-1');
    });

    it('should apply large size classes', async () => {
      swap.size = 'large';
      await waitForComponent(swap);
      
      const component = swap.querySelector('.swap-component');
      expect(component.className).to.include('text-xl');
      expect(component.className).to.include('p-3');
    });

    it('should apply medium size classes by default', async () => {
      await waitForComponent(swap);
      
      const component = swap.querySelector('.swap-component');
      expect(component.className).to.include('text-base');
      expect(component.className).to.include('p-2');
    });
  });

  describe('Public API', () => {
    let swap;

    beforeEach(() => {
      swap = document.createElement('swap-component');
      document.body.appendChild(swap);
    });

    it('should provide toggle method', () => {
      expect(swap.active).to.be.false;
      swap.toggle();
      expect(swap.active).to.be.true;
      swap.toggle();
      expect(swap.active).to.be.false;
    });

    it('should not toggle when disabled via API', () => {
      swap.disabled = true;
      expect(swap.active).to.be.false;
      swap.toggle();
      expect(swap.active).to.be.false;
    });
  });

  describe('Attribute Handling', () => {
    let swap;

    beforeEach(() => {
      swap = document.createElement('swap-component');
    });

    it('should handle iconOn getter/setter', () => {
      const icon = '<i class="fas fa-check"></i>';
      expect(swap.iconOn).to.include('svg'); // default SVG
      
      swap.setAttribute('icon-on', icon);
      expect(swap.iconOn).to.equal(icon);
    });

    it('should handle iconOff getter/setter', () => {
      const icon = '<i class="fas fa-times"></i>';
      expect(swap.iconOff).to.include('svg'); // default SVG
      
      swap.setAttribute('icon-off', icon);
      expect(swap.iconOff).to.equal(icon);
    });

    it('should handle size getter/setter', () => {
      expect(swap.size).to.equal('medium');
      
      swap.size = 'large';
      expect(swap.getAttribute('size')).to.equal('large');
      expect(swap.size).to.equal('large');
    });

    it('should handle disabled getter/setter', () => {
      expect(swap.disabled).to.be.false;
      
      swap.disabled = true;
      expect(swap.hasAttribute('disabled')).to.be.true;
      expect(swap.disabled).to.be.true;
      
      swap.disabled = false;
      expect(swap.hasAttribute('disabled')).to.be.false;
      expect(swap.disabled).to.be.false;
    });
  });

  describe('Accessibility', () => {
    let swap;

    beforeEach(() => {
      swap = document.createElement('swap-component');
      document.body.appendChild(swap);
    });

    it('should have proper ARIA attributes', async () => {
      await waitForComponent(swap);
      
      const component = swap.querySelector('.swap-component');
      expect(component.getAttribute('role')).to.equal('button');
      expect(component.getAttribute('aria-pressed')).to.equal('false');
      expect(component.getAttribute('tabindex')).to.equal('0');
    });

    it('should update aria-pressed when state changes', async () => {
      await waitForComponent(swap);
      
      const component = swap.querySelector('.swap-component');
      expect(component.getAttribute('aria-pressed')).to.equal('false');
      
      swap.active = true;
      await waitForComponent(swap);
      expect(component.getAttribute('aria-pressed')).to.equal('true');
    });

    it('should have focus styles', async () => {
      await waitForComponent(swap);
      
      const component = swap.querySelector('.swap-component');
      expect(component.className).to.include('focus:outline-none');
      expect(component.className).to.include('focus:ring-2');
    });
  });
});